{
  "button": {
    "dependencies": ["text"],
    "externalDeps": [],
    "setup": ["Install dependencies: leshi-ui add component text"],
    "example": "import { Button } from './components/ui/button';\n\n// Variants\n<Button variant=\"primary\" text=\"Primary\" />\n<Button variant=\"secondary\" text=\"Secondary\" />\n<Button variant=\"outline\" text=\"Outline\" />\n<Button variant=\"ghost\" text=\"Ghost\" />\n<Button variant=\"destructive\" text=\"Destructive\" />\n\n// Sizes\n<Button size=\"sm\" text=\"Small\" />\n<Button size=\"base\" text=\"Base\" />\n<Button size=\"lg\" text=\"Large\" />\n\n// States\n<Button loading={true} text=\"Loading...\" />\n<Button disabled={true} text=\"Disabled\" />\n\n// Custom onPress\n<Button \n  text=\"Click me\" \n  onPress={() => console.log('Button pressed!')} \n/>\n\n// With prefix/suffix icons\n<Button \n  text=\"With Prefix\" \n  prefix={<Icon name=\"check\" />} \n  variant=\"primary\" \n/>\n<Button \n  text=\"With Suffix\" \n  suffix={<Icon name=\"arrow-right\" />} \n  variant=\"primary\" \n/>",
    "api": {
      "description": "A versatile button component with multiple variants, sizes, and states. Supports loading states and custom content.",
      "extends": {
        "name": "PressableProps",
        "description": "All React Native Pressable props (onPress, disabled, style, etc.)"
      },
      "props": [
        {
          "name": "variant",
          "type": "ButtonVariant",
          "description": "Button style variant",
          "default": "primary"
        },
        {
          "name": "size",
          "type": "ButtonSize",
          "description": "Button size",
          "default": "base"
        },
        {
          "name": "text",
          "type": "string",
          "description": "Button text content"
        },
        {
          "name": "fullWidth",
          "type": "boolean",
          "description": "Whether button should take full container width"
        },
        {
          "name": "loading",
          "type": "boolean",
          "description": "Show loading spinner and disable interaction"
        },
        {
          "name": "prefix",
          "type": "ReactElement",
          "description": "Element to display before the text"
        },
        {
          "name": "suffix",
          "type": "ReactElement",
          "description": "Element to display after the text"
        }
      ],
      "variants": {
        "variant": [
          "primary",
          "destructive",
          "outline",
          "secondary",
          "ghost",
          "link"
        ],
        "size": ["base", "sm", "lg", "icon"]
      }
    }
  },
  "modal": {
    "dependencies": [],
    "externalDeps": ["@gorhom/portal"],
    "utilities": ["lib/modal-utils.ts"],
    "setup": [
      "Install external dependency: bun add @gorhom/portal",
      "Wrap your app with ModalProvider in _layout.tsx"
    ],
    "setupCode": "import { ModalProvider } from './components/ui/modal';\n\nexport const Layout = () => {\n  return (\n    <ModalProvider>\n      <YourApp />\n    </ModalProvider>\n  );\n};",
    "example": "import { Modal, ModalProvider } from './components/ui/modal';\nimport { Button, Text, Surface } from './components/ui';\nimport { useState } from 'react';\n\n// 1. Setup ModalProvider in your app root:\n<ModalProvider>\n  <YourApp />\n</ModalProvider>\n\n// 2. Using the modal:\nfunction Example() {\n  const [visible, setVisible] = useState(false);\n\n  return (\n    <>\n      <Button \n        text=\"Open Modal\" \n        onPress={() => setVisible(true)} \n      />\n      \n      <Modal \n        visible={visible} \n        onRequestClose={() => setVisible(false)}\n      >\n        <Surface padding=\"lg\">\n          <Text variant=\"heading\" size=\"lg\">Modal Title</Text>\n          <Text>Modal content goes here</Text>\n          <Button \n            text=\"Close\" \n            onPress={() => setVisible(false)} \n          />\n        </Surface>\n      </Modal>\n    </>\n  );\n}\n\n// Size variants:\n<Modal size=\"sm\">      // Small modal\n<Modal size=\"base\">    // Default size\n<Modal size=\"lg\">      // Large modal\n<Modal size=\"xl\">      // Extra large\n<Modal size=\"full\">    // Full screen\n\n// Animation types:\n<Modal animationType=\"fade\">   // Fade in/out\n<Modal animationType=\"slide\">  // Slide from bottom\n<Modal animationType=\"scale\">  // Scale animation\n<Modal animationType=\"none\">   // No animation\n\n// Backdrop customization:\n<Modal \n  closeOnBackdrop={false}\n  backdropOpacity={0.8}\n  backdropColor=\"rgba(0,0,0,0.5)\"\n/>",
    "api": {
      "description": "A flexible modal component with smooth animations, backdrop support, and multiple size options. Built with @gorhom/portal.",
      "props": [
        {
          "name": "visible",
          "type": "boolean",
          "description": "Whether the modal is visible",
          "required": true
        },
        {
          "name": "onRequestClose",
          "type": "() => void",
          "description": "Callback when modal should be closed"
        },
        {
          "name": "size",
          "type": "ModalSize",
          "description": "Modal size variant",
          "default": "base"
        },
        {
          "name": "animationType",
          "type": "ModalAnimation",
          "description": "Animation type for modal",
          "default": "fade"
        },
        {
          "name": "closeOnBackdrop",
          "type": "boolean",
          "description": "Whether tapping backdrop closes modal",
          "default": "true"
        },
        {
          "name": "closeOnBackButton",
          "type": "boolean",
          "description": "Whether Android back button closes modal",
          "default": "true"
        },
        {
          "name": "backdropOpacity",
          "type": "number",
          "description": "Backdrop opacity (0-1)"
        },
        {
          "name": "backdropColor",
          "type": "string",
          "description": "Custom backdrop color"
        },
        {
          "name": "statusBarTranslucent",
          "type": "boolean",
          "description": "Whether status bar should be translucent",
          "default": "false"
        },
        {
          "name": "children",
          "type": "ReactNode",
          "description": "Modal content",
          "required": true
        }
      ],
      "variants": {
        "size": ["sm", "base", "lg", "xl", "full"],
        "animationType": ["fade", "slide", "scale", "none"]
      }
    }
  },
  "dialog": {
    "dependencies": ["modal", "text", "icon", "slot"],
    "externalDeps": ["@gorhom/portal"],
    "setup": [
      "Install external dependency: bun add @gorhom/portal",
      "Install components: leshi-ui add component modal text icon slot",
      "Wrap your app with ModalProvider in _layout.tsx"
    ],
    "setupCode": "import { ModalProvider } from './components/ui/modal';\n\nexport const Layout = () => {\n  return (\n    <ModalProvider>\n      <YourApp />\n    </ModalProvider>\n  );\n};",
    "example": "import { Dialog, Button, Text } from './components/ui';\nimport { useState } from 'react';\n\nfunction Example() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <Dialog.Root open={open} onOpenChange={setOpen}>\n      <Dialog.Trigger asChild>\n        <Button text=\"Open Dialog\" />\n      </Dialog.Trigger>\n      <Dialog.Content>\n        <Dialog.Header>\n          <Dialog.Title>Dialog Title</Dialog.Title>\n          <Dialog.Description>\n            Optional description text here\n          </Dialog.Description>\n        </Dialog.Header>\n        <Text>Dialog content goes here...</Text>\n        <Dialog.Footer>\n          <Dialog.Close asChild>\n            <Button variant=\"outline\" text=\"Cancel\" />\n          </Dialog.Close>\n          <Button text=\"Confirm\" onPress={() => console.log('Confirmed')} />\n        </Dialog.Footer>\n      </Dialog.Content>\n    </Dialog.Root>\n  );\n}\n\n// Size variants:\n<Dialog.Root size=\"sm\">\n<Dialog.Root size=\"base\">\n<Dialog.Root size=\"lg\">\n<Dialog.Root size=\"xl\">\n\n// With close button:\n<Dialog.Content showCloseButton>\n\n// Custom trigger:\n<Dialog.Trigger asChild>\n  <Pressable style={customStyle}>\n    <Text>Custom Trigger</Text>\n  </Pressable>\n</Dialog.Trigger>",
    "api": {
      "description": "A compound dialog component built on Modal with header, content, and footer sections. Supports the asChild pattern for custom triggers.",
      "props": [
        {
          "name": "open",
          "type": "boolean",
          "description": "Whether the dialog is open",
          "required": true
        },
        {
          "name": "onOpenChange",
          "type": "(open: boolean) => void",
          "description": "Callback when dialog open state changes"
        },
        {
          "name": "size",
          "type": "DialogSize",
          "description": "Dialog size variant",
          "default": "base"
        },
        {
          "name": "showCloseButton",
          "type": "boolean",
          "description": "Whether to show close button in header",
          "default": "true"
        },
        {
          "name": "children",
          "type": "ReactNode",
          "description": "Dialog content (Trigger, Content, etc.)",
          "required": true
        }
      ],
      "variants": {
        "size": ["sm", "base", "lg", "xl"]
      }
    }
  },
  "alert-dialog": {
    "dependencies": ["modal", "text", "button", "slot"],
    "externalDeps": ["@gorhom/portal"],
    "setup": [
      "Install external dependency: bun add @gorhom/portal",
      "Install components: leshi-ui add component modal text button slot",
      "Wrap your app with ModalProvider in _layout.tsx"
    ],
    "setupCode": "import { ModalProvider } from './components/ui/modal';\n\nexport const Layout = () => {\n  return (\n    <ModalProvider>\n      <YourApp />\n    </ModalProvider>\n  );\n};",
    "example": "import { AlertDialog, Button } from './components/ui';\nimport { useState } from 'react';\n\nfunction Example() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <AlertDialog.Root open={open} onOpenChange={setOpen}>\n      <AlertDialog.Trigger asChild>\n        <Button variant=\"destructive\" text=\"Delete\" />\n      </AlertDialog.Trigger>\n      <AlertDialog.Content>\n        <AlertDialog.Header>\n          <AlertDialog.Title>Are you sure?</AlertDialog.Title>\n          <AlertDialog.Description>\n            This action cannot be undone.\n          </AlertDialog.Description>\n        </AlertDialog.Header>\n        <AlertDialog.Footer>\n          <AlertDialog.Cancel asChild>\n            <Button variant=\"outline\" text=\"Cancel\" />\n          </AlertDialog.Cancel>\n          <AlertDialog.Action asChild>\n            <Button variant=\"destructive\" text=\"Delete\" />\n          </AlertDialog.Action>\n        </AlertDialog.Footer>\n      </AlertDialog.Content>\n    </AlertDialog.Root>\n  );\n}\n\n// Variants and sizes:\n<AlertDialog.Root variant=\"destructive\">\n<AlertDialog.Root variant=\"warning\">\n<AlertDialog.Root size=\"sm\">\n<AlertDialog.Root size=\"lg\">\n\n// Async actions:\n<AlertDialog.Action\n  asChild\n  closeOnPress={false}\n  onPress={async () => await deleteUser()}\n>\n  <Button variant=\"destructive\" text=\"Delete\" />\n</AlertDialog.Action>\n\n// Vertical footer:\n<AlertDialog.Footer orientation=\"vertical\">",
    "api": {
      "description": "An alert dialog component for confirming destructive or important actions. Built on Dialog with predefined styling for alerts.",
      "props": [
        {
          "name": "open",
          "type": "boolean",
          "description": "Whether the alert dialog is open",
          "required": true
        },
        {
          "name": "onOpenChange",
          "type": "(open: boolean) => void",
          "description": "Callback when alert dialog open state changes"
        },
        {
          "name": "variant",
          "type": "AlertVariant",
          "description": "Alert style variant",
          "default": "destructive"
        },
        {
          "name": "size",
          "type": "AlertDialogSize",
          "description": "Alert dialog size",
          "default": "base"
        },
        {
          "name": "children",
          "type": "ReactNode",
          "description": "Alert dialog content (Trigger, Content, etc.)",
          "required": true
        }
      ],
      "variants": {
        "variant": ["destructive", "warning"],
        "size": ["sm", "base", "lg"]
      }
    }
  },
  "text": {
    "dependencies": [],
    "externalDeps": [],
    "setup": [],
    "example": "import { Text } from './components/ui/text';\n\n// Semantic variants\n<Text variant=\"heading\" size=\"2xl\">Main Heading</Text>\n<Text variant=\"heading\" size=\"lg\">Section Heading</Text>\n<Text variant=\"subheading\">Subheading text</Text>\n<Text variant=\"body\">Regular body text for paragraphs</Text>\n<Text variant=\"caption\">Caption text</Text>\n<Text variant=\"code\">Code text</Text>\n<Text variant=\"mutedForeground\">Muted text</Text>\n\n// Sizes\n<Text size=\"xs\">Extra small</Text>\n<Text size=\"sm\">Small</Text>\n<Text size=\"base\">Base</Text>\n<Text size=\"lg\">Large</Text>\n<Text size=\"xl\">Extra large</Text>\n<Text size=\"2xl\">2X large</Text>\n\n// Font weights\n<Text weight=\"light\">Light text</Text>\n<Text weight=\"regular\">Regular text</Text>\n<Text weight=\"medium\">Medium text</Text>\n<Text weight=\"semibold\">Semibold text</Text>\n<Text weight=\"bold\">Bold text</Text>\n\n// Combined usage\n<Text variant=\"heading\" size=\"xl\" weight=\"bold\">\n  Combined props\n</Text>",
    "api": {
      "description": "A typography component with semantic variants, sizes, and font weights. Provides consistent text styling across your app.",
      "extends": {
        "name": "TextProps",
        "description": "All React Native Text props (onPress, numberOfLines, style, etc.)"
      },
      "props": [
        {
          "name": "variant",
          "type": "TextVariant",
          "description": "Semantic text variant that determines color",
          "default": "foreground"
        },
        {
          "name": "size",
          "type": "TextSize",
          "description": "Text size",
          "default": "base"
        },
        {
          "name": "weight",
          "type": "Weight",
          "description": "Font weight",
          "default": "regular"
        },
        {
          "name": "children",
          "type": "ReactNode",
          "description": "Text content to display"
        }
      ],
      "variants": {
        "variant": [
          "heading",
          "subheading",
          "body",
          "caption",
          "overline",
          "primary",
          "secondary",
          "destructive",
          "mutedForeground",
          "foreground"
        ],
        "size": [
          "xs",
          "sm",
          "base",
          "lg",
          "xl",
          "2xl",
          "3xl",
          "4xl",
          "5xl",
          "6xl",
          "7xl",
          "8xl",
          "9xl"
        ],
        "weight": [
          "thin",
          "extralight",
          "light",
          "regular",
          "medium",
          "semibold",
          "bold",
          "extrabold",
          "black"
        ]
      }
    }
  },
  "text-input": {
    "dependencies": ["label", "text"],
    "externalDeps": [],
    "setup": ["Install dependencies: leshi-ui add component label text"],
    "example": "import { TextInput } from './components/ui/text-input';\nimport { Icon } from './components/ui/icon';\nimport { useState } from 'react';\n\nfunction Example() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  return (\n    <>\n      {/* Basic usage */}\n      <TextInput\n        label=\"Email\"\n        placeholder=\"Enter your email\"\n        value={email}\n        onChangeText={setEmail}\n      />\n\n      {/* Variants */}\n      <TextInput variant=\"default\" placeholder=\"Default variant\" />\n      <TextInput variant=\"destructive\" placeholder=\"Destructive variant\" />\n\n      {/* Sizes */}\n      <TextInput size=\"sm\" placeholder=\"Small\" />\n      <TextInput size=\"base\" placeholder=\"Base\" />\n      <TextInput size=\"lg\" placeholder=\"Large\" />\n      <TextInput size=\"xl\" placeholder=\"Extra large\" />\n\n      {/* Error state */}\n      <TextInput\n        error=\"This field is required\"\n        placeholder=\"Error state\"\n      />\n\n      {/* With description */}\n      <TextInput\n        description=\"This is a helpful description\"\n        placeholder=\"With description\"\n      />\n\n      {/* With prefix/suffix */}\n      <TextInput\n        prefix={<Icon name=\"mail\" />}\n        placeholder=\"Email with icon\"\n      />\n      <TextInput\n        suffix={<Icon name=\"eye\" />}\n        placeholder=\"Password with eye icon\"\n      />\n\n      {/* Secure input */}\n      <TextInput\n        label=\"Password\"\n        secureTextEntry\n        value={password}\n        onChangeText={setPassword}\n      />\n\n      {/* Disabled */}\n      <TextInput\n        label=\"Disabled Field\"\n        editable={false}\n        placeholder=\"This field is disabled\"\n      />\n    </>\n  );\n}",
    "api": {
      "description": "A styled text input component with label, helper text, and validation states. Supports various sizes and styling variants.",
      "extends": {
        "name": "TextInputProps",
        "description": "All React Native TextInput props (value, onChangeText, placeholder, etc.)"
      },
      "props": [
        {
          "name": "label",
          "type": "string",
          "description": "Input label text"
        },
        {
          "name": "variant",
          "type": "TextInputVariant",
          "description": "Input styling variant",
          "default": "default"
        },
        {
          "name": "size",
          "type": "TextInputSize",
          "description": "Input size",
          "default": "base"
        },
        {
          "name": "error",
          "type": "string",
          "description": "Error message to display below input"
        },
        {
          "name": "description",
          "type": "string",
          "description": "Helper text to display below input"
        },
        {
          "name": "prefix",
          "type": "ReactNode",
          "description": "Element to display before the input"
        },
        {
          "name": "suffix",
          "type": "ReactNode",
          "description": "Element to display after the input"
        },
        {
          "name": "labelSize",
          "type": "TextSize",
          "description": "Size of the label text"
        },
        {
          "name": "textSize",
          "type": "TextInputContentSize",
          "description": "Size of the input text",
          "default": "base"
        }
      ],
      "variants": {
        "variant": ["default", "destructive"],
        "size": ["sm", "base", "lg", "xl"]
      }
    }
  },
  "text-area": {
    "dependencies": ["label", "text"],
    "externalDeps": [],
    "setup": ["Install dependencies: leshi-ui add component label text"],
    "example": "import { TextArea } from './components/ui/text-area';\nimport { useState } from 'react';\n\nfunction Example() {\n  const [description, setDescription] = useState('');\n  const [feedback, setFeedback] = useState('');\n\n  return (\n    <>\n      {/* Basic usage */}\n      <TextArea\n        label=\"Description\"\n        placeholder=\"Enter description...\"\n        value={description}\n        onChangeText={setDescription}\n        rows={4}\n      />\n\n      {/* Different row counts */}\n      <TextArea rows={2} placeholder=\"2 rows\" />\n      <TextArea rows={6} placeholder=\"6 rows\" />\n      <TextArea rows={8} placeholder=\"8 rows\" />\n\n      {/* Variants */}\n      <TextArea variant=\"default\" placeholder=\"Default variant\" />\n      <TextArea variant=\"destructive\" placeholder=\"Destructive variant\" />\n\n      {/* Sizes */}\n      <TextArea size=\"sm\" placeholder=\"Small\" />\n      <TextArea size=\"base\" placeholder=\"Base\" />\n      <TextArea size=\"lg\" placeholder=\"Large\" />\n      <TextArea size=\"xl\" placeholder=\"Extra large\" />\n\n      {/* Error state */}\n      <TextArea\n        error=\"Message is too short\"\n        placeholder=\"Error state\"\n      />\n\n      {/* With description */}\n      <TextArea\n        description=\"Provide detailed feedback\"\n        placeholder=\"With description\"\n      />\n\n      {/* Character limit with count */}\n      <TextArea\n        label=\"Feedback\"\n        value={feedback}\n        onChangeText={setFeedback}\n        maxLength={500}\n        showCharacterCount\n        rows={4}\n      />\n\n      {/* Disabled */}\n      <TextArea\n        label=\"Disabled Message\"\n        editable={false}\n        placeholder=\"This field is disabled\"\n        rows={3}\n      />\n    </>\n  );\n}",
    "api": {
      "description": "A multi-line text input component with configurable rows, label, and validation states. Perfect for longer text content.",
      "extends": {
        "name": "TextInputProps",
        "description": "All React Native TextInput props (value, onChangeText, placeholder, maxLength, etc.)"
      },
      "props": [
        {
          "name": "label",
          "type": "string",
          "description": "TextArea label text"
        },
        {
          "name": "rows",
          "type": "number",
          "description": "Number of visible text rows",
          "default": "4"
        },
        {
          "name": "variant",
          "type": "TextAreaVariant",
          "description": "TextArea styling variant",
          "default": "default"
        },
        {
          "name": "size",
          "type": "TextAreaSize",
          "description": "TextArea size",
          "default": "base"
        },
        {
          "name": "error",
          "type": "string",
          "description": "Error message to display below textarea"
        },
        {
          "name": "description",
          "type": "string",
          "description": "Helper text to display below textarea"
        },
        {
          "name": "labelSize",
          "type": "TextSize",
          "description": "Size of the label text"
        },
        {
          "name": "resize",
          "type": "TextAreaResize",
          "description": "Resize behavior",
          "default": "none"
        },
        {
          "name": "showCharacterCount",
          "type": "boolean",
          "description": "Whether to show character count when maxLength is set"
        }
      ],
      "variants": {
        "variant": ["default", "destructive"],
        "size": ["sm", "base", "lg", "xl"],
        "resize": ["none", "vertical", "horizontal", "both"]
      }
    }
  },
  "surface": {
    "dependencies": [],
    "externalDeps": [],
    "setup": [],
    "example": "import { Surface } from './components/ui/surface';\nimport { Text } from './components/ui/text';\n\n// Variants\n<Surface variant=\"filled\">\n  <Text>Filled surface</Text>\n</Surface>\n<Surface variant=\"outlined\">\n  <Text>Outlined surface</Text>\n</Surface>\n<Surface variant=\"default\">\n  <Text>Default surface</Text>\n</Surface>\n<Surface variant=\"secondary\">\n  <Text>Secondary surface</Text>\n</Surface>\n<Surface variant=\"muted\">\n  <Text>Muted surface</Text>\n</Surface>\n<Surface variant=\"accent\">\n  <Text>Accent surface</Text>\n</Surface>\n\n// Elevation levels\n<Surface elevation=\"none\">No shadow</Surface>\n<Surface elevation=\"sm\">Small shadow</Surface>\n<Surface elevation=\"md\">Medium shadow</Surface>\n<Surface elevation=\"lg\">Large shadow</Surface>\n<Surface elevation=\"xl\">Extra large shadow</Surface>\n\n// Border radius\n<Surface radius=\"none\">No radius</Surface>\n<Surface radius=\"sm\">Small radius</Surface>\n<Surface radius=\"md\">Medium radius</Surface>\n<Surface radius=\"lg\">Large radius</Surface>\n<Surface radius=\"full\">Fully rounded</Surface>\n\n// Padding options\n<Surface padding=\"none\">No padding</Surface>\n<Surface padding=\"sm\">Small padding</Surface>\n<Surface padding=\"md\">Medium padding</Surface>\n<Surface padding=\"lg\">Large padding</Surface>\n<Surface padding=\"xl\">Extra large padding</Surface>\n\n// Combined usage for cards\n<Surface \n  variant=\"default\" \n  elevation=\"md\" \n  radius=\"lg\" \n  padding=\"lg\"\n>\n  <Text variant=\"heading\" size=\"lg\">Card Title</Text>\n  <Text>Card content with elevated surface</Text>\n</Surface>",
    "api": {
      "description": "A styled container component with background variants, elevation, border radius, and padding options. Perfect for cards and elevated content.",
      "extends": {
        "name": "ViewProps",
        "description": "All React Native View props (style, onLayout, etc.)"
      },
      "props": [
        {
          "name": "variant",
          "type": "SurfaceVariant",
          "description": "Surface background variant",
          "default": "default"
        },
        {
          "name": "elevation",
          "type": "SurfaceElevation",
          "description": "Shadow elevation level",
          "default": "none"
        },
        {
          "name": "radius",
          "type": "SurfaceRadius",
          "description": "Border radius size",
          "default": "md"
        },
        {
          "name": "padding",
          "type": "SurfacePadding",
          "description": "Internal padding size",
          "default": "none"
        },
        {
          "name": "children",
          "type": "ReactNode",
          "description": "Surface content",
          "required": true
        }
      ],
      "variants": {
        "variant": [
          "filled",
          "outlined",
          "default",
          "secondary",
          "muted",
          "accent"
        ],
        "elevation": ["none", "sm", "md", "lg", "xl"],
        "radius": ["none", "sm", "md", "lg", "full"],
        "padding": ["none", "sm", "md", "lg", "xl"]
      }
    }
  },
  "checkbox": {
    "dependencies": ["icon"],
    "externalDeps": [],
    "setup": ["Install dependencies: leshi-ui add component icon"],
    "example": "import { Checkbox } from './components/ui/checkbox';\nimport { Label } from './components/ui/label';\nimport { View } from 'react-native';\nimport { useState } from 'react';\n\nfunction Example() {\n  const [checked, setChecked] = useState(false);\n  const [terms, setTerms] = useState(false);\n  const [newsletter, setNewsletter] = useState(false);\n\n  return (\n    <>\n      {/* Basic usage */}\n      <Checkbox\n        checked={checked}\n        onCheckedChange={setChecked}\n      />\n\n      {/* With label (separate component) */}\n      <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>\n        <Checkbox\n          checked={terms}\n          onCheckedChange={setTerms}\n        />\n        <Label>Accept terms and conditions</Label>\n      </View>\n\n      {/* Sizes */}\n      <Checkbox size=\"sm\" checked={true} />\n      <Checkbox size=\"base\" checked={true} />\n      <Checkbox size=\"lg\" checked={true} />\n\n      {/* Variants */}\n      <Checkbox variant=\"default\" checked={true} />\n      <Checkbox variant=\"destructive\" checked={true} />\n\n      {/* Disabled */}\n      <Checkbox disabled checked={false} />\n      <Checkbox disabled checked={true} />\n\n      {/* Indeterminate state */}\n      <Checkbox indeterminate={true} />\n    </>\n  );\n}",
    "api": {
      "description": "A checkbox component with label support and customizable styling. Supports controlled and uncontrolled modes.",
      "extends": {
        "name": "PressableProps",
        "description": "All React Native Pressable props (onPress, disabled, style, etc.)"
      },
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "description": "Whether the checkbox is checked"
        },
        {
          "name": "defaultChecked",
          "type": "boolean",
          "description": "Default checked state for uncontrolled component"
        },
        {
          "name": "onCheckedChange",
          "type": "(checked: boolean) => void",
          "description": "Callback when checkbox state changes"
        },
        {
          "name": "size",
          "type": "CheckboxSize",
          "description": "Checkbox size",
          "default": "base"
        },
        {
          "name": "variant",
          "type": "CheckboxVariant",
          "description": "Checkbox visual variant",
          "default": "default"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "Whether the checkbox is disabled"
        },
        {
          "name": "indeterminate",
          "type": "boolean",
          "description": "Whether the checkbox is in an indeterminate state"
        }
      ],
      "variants": {
        "size": ["sm", "base", "lg"],
        "variant": ["default", "destructive"]
      }
    }
  },
  "icon": {
    "dependencies": ["text"],
    "externalDeps": [],
    "setup": ["Install dependencies: leshi-ui add component text"],
    "example": "import { Icon } from './components/ui/icon';\n\n// Available icons\n<Icon name=\"checkbox\" size={20} />\n<Icon name=\"x\" size={16} />\n<Icon name=\"minus\" size={18} />\n\n// With custom color\n<Icon name=\"checkbox\" color=\"green\" size={24} />\n<Icon name=\"x\" color=\"red\" size={20} />\n\n// Different sizes\n<Icon name=\"checkbox\" size={12} />  // Small\n<Icon name=\"checkbox\" size={16} />  // Medium\n<Icon name=\"checkbox\" size={24} />  // Large",
    "api": {
      "description": "An icon component with theme-aware colors and sizing. Uses a predefined icon set with semantic color variants.",
      "extends": {
        "name": "TextProps",
        "description": "All React Native Text props (style, onPress, etc.)"
      },
      "props": [
        {
          "name": "name",
          "type": "IconName",
          "description": "Icon name from the available set",
          "required": true
        },
        {
          "name": "size",
          "type": "number",
          "description": "Icon size in pixels"
        },
        {
          "name": "color",
          "type": "string",
          "description": "Icon color (any valid color string)"
        }
      ],
      "variants": {
        "name": ["checkbox", "x", "minus"]
      }
    }
  },
  "avatar": {
    "dependencies": ["text"],
    "externalDeps": [],
    "setup": ["Install dependencies: leshi-ui add component text"],
    "example": "import { Avatar } from './components/ui/avatar';\n\n// With image source\n<Avatar source={{ uri: 'https://github.com/github.png' }} size=\"lg\" />\n\n// With fallback text\n<Avatar fallback=\"JD\" size=\"md\" />\n\n// Different sizes\n<Avatar fallback=\"A\" size=\"sm\" />\n<Avatar fallback=\"B\" size=\"md\" />\n<Avatar fallback=\"C\" size=\"lg\" />\n<Avatar fallback=\"D\" size=\"xl\" />\n\n// Image with fallback\n<Avatar \n  source={{ uri: 'https://example.com/avatar.jpg' }}\n  fallback=\"U\"\n  size=\"lg\"\n/>",
    "api": {
      "description": "A user avatar component that displays an image with fallback text. Supports various sizes and automatic fallback handling.",
      "extends": {
        "name": "ViewProps",
        "description": "All React Native View props (style, onLayout, etc.)"
      },
      "props": [
        {
          "name": "source",
          "type": "ImageSourcePropType",
          "description": "Image source for the avatar"
        },
        {
          "name": "fallback",
          "type": "string",
          "description": "Fallback text when image fails to load"
        },
        {
          "name": "size",
          "type": "AvatarSize",
          "description": "Avatar size",
          "default": "md"
        }
      ],
      "variants": {
        "size": ["sm", "md", "lg", "xl"]
      }
    }
  },
  "badge": {
    "dependencies": ["text"],
    "externalDeps": [],
    "setup": ["Install dependencies: leshi-ui add component text"],
    "example": "import { Badge } from './components/ui/badge';\n\n<Badge variant=\"default\">New</Badge>\n<Badge variant=\"secondary\">Beta</Badge>\n<Badge variant=\"destructive\">Error</Badge>",
    "api": {
      "description": "A small status badge component for displaying labels, notifications, or status indicators with various color variants.",
      "extends": {
        "name": "ViewProps",
        "description": "All React Native View props (style, onLayout, etc.)"
      },
      "props": [
        {
          "name": "variant",
          "type": "BadgeVariant",
          "description": "Badge color variant",
          "default": "default"
        },
        {
          "name": "size",
          "type": "BadgeSize",
          "description": "Badge size",
          "default": "base"
        },
        {
          "name": "children",
          "type": "ReactNode",
          "description": "Badge content",
          "required": true
        }
      ],
      "variants": {
        "variant": ["default", "secondary", "destructive", "outline"],
        "size": ["sm", "base", "lg"]
      }
    }
  },
  "label": {
    "dependencies": ["text"],
    "externalDeps": [],
    "setup": ["Install dependencies: leshi-ui add component text"],
    "example": "import { Label } from './components/ui/label';\n\n// Basic usage\n<Label>Email Address</Label>\n<Label>Password</Label>\n\n// With error state\n<Label error>This field has an error</Label>\n\n// Disabled state\n<Label disabled>Disabled label</Label>\n\n// Custom styling\n<Label style={{ fontSize: 16, fontWeight: 'bold' }}>\n  Custom Label\n</Label>",
    "api": {
      "description": "A form label component with required field indicator support. Used to label form inputs and controls.",
      "extends": {
        "name": "TextProps",
        "description": "All React Native Text props (onPress, numberOfLines, style, etc.)"
      },
      "props": [
        {
          "name": "error",
          "type": "boolean",
          "description": "Whether the label is in error state"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "Whether the label is disabled"
        },
        {
          "name": "children",
          "type": "ReactNode",
          "description": "Label text content",
          "required": true
        }
      ],
      "variants": {}
    }
  },
  "skeleton": {
    "dependencies": [],
    "externalDeps": ["react-native-reanimated"],
    "setup": ["Install external dependency: bun add react-native-reanimated"],
    "example": "import { Skeleton } from './components/ui/skeleton';\n\n// Basic usage\n<Skeleton height={20} width={200} />\n<Skeleton height={40} width=\"100%\" />\n\n// Different dimensions\n<Skeleton height={16} width={120} />  // Small text\n<Skeleton height={24} width={180} />  // Medium text\n<Skeleton height={32} width={240} />  // Large text\n\n// Custom border radius\n<Skeleton height={60} width={60} borderRadius={30} />  // Circle\n<Skeleton height={100} width={150} borderRadius={8} />  // Rounded card\n\n// Without animation\n<Skeleton height={20} width={100} animated={false} />\n\n// Full width examples\n<Skeleton height={44} width=\"100%\" borderRadius={6} />  // Button skeleton\n<Skeleton height={200} width=\"100%\" borderRadius={12} /> // Image skeleton",
    "api": {
      "description": "An animated skeleton loading placeholder with shimmer effect. Perfect for showing loading states while content loads.",
      "extends": {
        "name": "ViewProps",
        "description": "All React Native View props (style, onLayout, etc.)"
      },
      "props": [
        {
          "name": "width",
          "type": "DimensionValue",
          "description": "Skeleton width",
          "default": "100%"
        },
        {
          "name": "height",
          "type": "DimensionValue",
          "description": "Skeleton height",
          "default": "20"
        },
        {
          "name": "borderRadius",
          "type": "number",
          "description": "Custom border radius"
        },
        {
          "name": "animated",
          "type": "boolean",
          "description": "Whether to show shimmer animation",
          "default": "true"
        }
      ],
      "variants": {}
    }
  },
  "progress": {
    "dependencies": [],
    "externalDeps": ["react-native-reanimated"],
    "setup": ["Install external dependency: bun add react-native-reanimated"],
    "example": "import { Progress } from './components/ui/progress';\n\n<Progress value={60} max={100} />\n<Progress value={progress} variant=\"success\" />",
    "api": {
      "description": "An animated progress bar component with smooth value transitions and multiple visual variants.",
      "extends": {
        "name": "ViewProps",
        "description": "All React Native View props (style, onLayout, etc.)"
      },
      "props": [
        {
          "name": "value",
          "type": "number",
          "description": "Current progress value",
          "required": true
        },
        {
          "name": "max",
          "type": "number",
          "description": "Maximum progress value",
          "default": "100"
        },
        {
          "name": "variant",
          "type": "ProgressVariant",
          "description": "Progress color variant",
          "default": "default"
        },
        {
          "name": "size",
          "type": "ProgressSize",
          "description": "Progress bar height",
          "default": "base"
        }
      ],
      "variants": {
        "variant": ["default", "success", "warning", "destructive"],
        "size": ["sm", "base", "lg"]
      }
    }
  },
  "switch": {
    "dependencies": [],
    "externalDeps": ["react-native-reanimated"],
    "setup": ["Install external dependency: bun add react-native-reanimated"],
    "example": "import { Switch } from './components/ui/switch';\nimport { Label } from './components/ui/label';\nimport { View } from 'react-native';\nimport { useState } from 'react';\n\nfunction Example() {\n  const [enabled, setEnabled] = useState(false);\n  const [notifications, setNotifications] = useState(true);\n\n  return (\n    <>\n      {/* Basic usage */}\n      <Switch\n        checked={enabled}\n        onCheckedChange={setEnabled}\n      />\n\n      {/* With label (separate component) */}\n      <View style={{ flexDirection: 'row', alignItems: 'center', gap: 8 }}>\n        <Switch\n          checked={notifications}\n          onCheckedChange={setNotifications}\n        />\n        <Label>Enable notifications</Label>\n      </View>\n\n      {/* Sizes */}\n      <Switch size=\"sm\" checked={true} />\n      <Switch size=\"base\" checked={true} />\n      <Switch size=\"lg\" checked={true} />\n\n      {/* Variants */}\n      <Switch variant=\"default\" checked={true} />\n      <Switch variant=\"destructive\" checked={true} />\n\n      {/* Disabled */}\n      <Switch disabled checked={false} />\n      <Switch disabled checked={true} />\n    </>\n  );\n}",
    "api": {
      "description": "An animated toggle switch component with smooth transitions. Supports controlled and uncontrolled modes with optional labels.",
      "extends": {
        "name": "PressableProps",
        "description": "All React Native Pressable props (onPress, disabled, style, etc.)"
      },
      "props": [
        {
          "name": "checked",
          "type": "boolean",
          "description": "Whether the switch is checked"
        },
        {
          "name": "defaultChecked",
          "type": "boolean",
          "description": "Default checked state for uncontrolled component"
        },
        {
          "name": "onCheckedChange",
          "type": "(checked: boolean) => void",
          "description": "Callback when switch state changes"
        },
        {
          "name": "size",
          "type": "SwitchSize",
          "description": "Switch size",
          "default": "base"
        },
        {
          "name": "variant",
          "type": "SwitchVariant",
          "description": "Switch visual variant",
          "default": "default"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "Whether the switch is disabled"
        }
      ],
      "variants": {
        "size": ["sm", "base", "lg"],
        "variant": ["default", "destructive"]
      }
    }
  },
  "slot": {
    "dependencies": [],
    "externalDeps": [],
    "setup": [],
    "example": "import { Slot } from './components/ui/slot';\nimport { Button } from './components/ui/button';\n\n// Basic usage - merges props and renders the child\n<Slot>\n  <Button text=\"Slotted button\" />\n</Slot>\n\n// The Slot component enables the asChild pattern:\n// Instead of rendering a wrapper element, it renders\n// the child directly with merged props.\n\n// How asChild works in practice:\nfunction MyTrigger({ asChild, onPress, children }) {\n  if (asChild) {\n    return (\n      <Slot onPress={onPress}>\n        {children}\n      </Slot>\n    );\n  }\n  \n  return (\n    <Pressable onPress={onPress}>\n      {children}\n    </Pressable>\n  );\n}\n\n// Usage:\n<MyTrigger asChild onPress={() => console.log('clicked')}>\n  <Button text=\"Custom styled button\" />\n</MyTrigger>\n\n// Result: Button gets the onPress prop merged,\n// no extra wrapper Pressable is created.",
    "api": {
      "description": "A utility component that merges props into its child component. Essential for the asChild pattern, allowing components to be replaced while maintaining functionality.",
      "props": [
        {
          "name": "children",
          "type": "ReactElement",
          "description": "Single React element to merge props into",
          "required": true
        }
      ],
      "variants": {}
    }
  },
  "divider": {
    "dependencies": [],
    "externalDeps": [],
    "setup": [],
    "example": "import { Divider } from './components/ui/divider';\n\n// Basic horizontal divider\n<Divider />\n\n// Vertical divider\n<Divider orientation=\"vertical\" />\n\n// Custom styling\n<Divider style={{ backgroundColor: 'red', height: 2 }} />\n<Divider \n  orientation=\"vertical\" \n  style={{ width: 2, backgroundColor: 'blue' }} \n/>",
    "api": {
      "description": "A visual separator component for dividing content sections. Supports horizontal and vertical orientations with styling variants.",
      "extends": {
        "name": "ViewProps",
        "description": "All React Native View props (style, onLayout, etc.)"
      },
      "props": [
        {
          "name": "orientation",
          "type": "DividerOrientation",
          "description": "Divider orientation",
          "default": "horizontal"
        }
      ],
      "variants": {
        "orientation": ["horizontal", "vertical"]
      }
    }
  },
  "radio": {
    "dependencies": ["text"],
    "externalDeps": [],
    "setup": ["Install dependencies: leshi-ui add component text"],
    "example": "import { Radio } from './components/ui/radio';\n\n<Radio.Group value={value} onValueChange={setValue}>\n  <Radio.Item value=\"option1\" label=\"Option 1\" />\n  <Radio.Item value=\"option2\" label=\"Option 2\" />\n</Radio.Group>",
    "api": {
      "description": "A radio button group component for single-select options. Uses compound component pattern with Group and Item.",
      "props": [
        {
          "name": "value",
          "type": "string",
          "description": "Selected radio value (Radio.Group)"
        },
        {
          "name": "onValueChange",
          "type": "(value: string) => void",
          "description": "Callback when selection changes (Radio.Group)"
        },
        {
          "name": "value",
          "type": "string",
          "description": "Radio item value (Radio.Item)",
          "required": true
        },
        {
          "name": "label",
          "type": "string",
          "description": "Radio item label (Radio.Item)"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "Whether radio item is disabled (Radio.Item)"
        }
      ],
      "variants": {}
    }
  },
  "spinner": {
    "dependencies": [],
    "externalDeps": [],
    "setup": [],
    "example": "import { Spinner } from './components/ui/spinner';\n\n// Basic usage\n<Spinner />\n\n// Different sizes\n<Spinner size=\"small\" />\n<Spinner size=\"large\" />\n<Spinner size={30} />  // Custom size\n\n// With custom color\n<Spinner color=\"blue\" />\n<Spinner color=\"red\" size=\"large\" />\n\n// Loading states\n<Spinner size=\"small\" color=\"gray\" />  // Small loading\n<Spinner size={40} color=\"green\" />   // Custom loading",
    "api": {
      "description": "An animated loading spinner component with smooth rotation animation and customizable size and color options.",
      "extends": {
        "name": "ViewProps",
        "description": "All React Native View props (style, onLayout, etc.)"
      },
      "props": [
        {
          "name": "size",
          "type": "'large' | 'small' | number",
          "description": "Spinner size - predefined or custom number",
          "default": "large"
        },
        {
          "name": "color",
          "type": "string",
          "description": "Spinner color (any valid color string)"
        }
      ],
      "variants": {
        "size": ["large", "small"]
      }
    }
  }
}
