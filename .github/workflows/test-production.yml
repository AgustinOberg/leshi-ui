name: Test Production Ready

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  test-production-simulation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install root dependencies and build CLI
        run: |
          bun install
          cd cli
          npm run build
          npm pack

      # Simulate production usage without installing globally
      - name: Test production usage with npx (simulated)
        run: |
          # Create a completely separate directory to simulate user environment
          mkdir -p /tmp/user-project-npm
          cd /tmp/user-project-npm
          
          # Create a React Native project structure
          echo '{"name": "user-app", "version": "1.0.0", "dependencies": {"react-native": "^0.70.0"}}' > package.json
          echo 'module.exports = {};' > metro.config.js
          mkdir -p android ios src
          
          # Install the local CLI package (simulating npm install)
          npm install $GITHUB_WORKSPACE/cli/leshi-ui-*.tgz
          
          echo "üß™ Testing CLI as end user would use it..."
          
          # Test init
          npx leshi-ui init --yes
          
          # Verify init worked
          test -f leshi-ui.json || (echo "‚ùå Init failed - no config" && exit 1)
          test -d styles || (echo "‚ùå Init failed - no styles" && exit 1)
          test -f styles/themes/light.ts || (echo "‚ùå Init failed - no light theme" && exit 1)
          test -f styles/themes/dark.ts || (echo "‚ùå Init failed - no dark theme" && exit 1)
          
          # Test component installation
          npx leshi-ui add button --yes
          test -f src/components/ui/button.tsx || (echo "‚ùå Button not installed" && exit 1)
          test -f src/components/ui/text.tsx || (echo "‚ùå Text dependency not resolved" && exit 1)
          
          # Test complex component
          npx leshi-ui add dialog --yes
          test -f src/components/ui/dialog.tsx || (echo "‚ùå Dialog not installed" && exit 1)
          test -f src/components/ui/modal.tsx || (echo "‚ùå Modal dependency not resolved" && exit 1)
          test -f src/components/ui/icon.tsx || (echo "‚ùå Icon dependency not resolved" && exit 1)
          test -f src/components/ui/slot.tsx || (echo "‚ùå Slot dependency not resolved" && exit 1)
          
          # Test guide
          npx leshi-ui guide components | grep -q "Available Components" || (echo "‚ùå Guide command failed" && exit 1)
          
          echo "‚úÖ NPX production simulation passed!"

      - name: Test production usage with bunx (simulated)
        run: |
          # Create a completely separate directory to simulate user environment
          mkdir -p /tmp/user-project-bun
          cd /tmp/user-project-bun
          
          # Create a React Native project structure
          echo '{"name": "user-app-bun", "version": "1.0.0", "dependencies": {"react-native": "^0.70.0"}}' > package.json
          echo 'module.exports = {};' > metro.config.js
          mkdir -p android ios src
          
          # Install the local CLI package (simulating bun install)
          bun install $GITHUB_WORKSPACE/cli/leshi-ui-*.tgz
          
          echo "üß™ Testing CLI with Bun as end user would use it..."
          
          # Test init
          bunx leshi-ui init --yes
          
          # Verify init worked
          test -f leshi-ui.json || (echo "‚ùå Init failed - no config" && exit 1)
          test -d styles || (echo "‚ùå Init failed - no styles" && exit 1)
          test -f styles/themes/light.ts || (echo "‚ùå Init failed - no light theme" && exit 1)
          test -f styles/themes/dark.ts || (echo "‚ùå Init failed - no dark theme" && exit 1)
          
          # Test component installation
          bunx leshi-ui add button --yes
          test -f src/components/ui/button.tsx || (echo "‚ùå Button not installed" && exit 1)
          test -f src/components/ui/text.tsx || (echo "‚ùå Text dependency not resolved" && exit 1)
          
          # Test complex component
          bunx leshi-ui add dialog --yes
          test -f src/components/ui/dialog.tsx || (echo "‚ùå Dialog not installed" && exit 1)
          test -f src/components/ui/modal.tsx || (echo "‚ùå Modal dependency not resolved" && exit 1)
          test -f src/components/ui/icon.tsx || (echo "‚ùå Icon dependency not resolved" && exit 1)
          test -f src/components/ui/slot.tsx || (echo "‚ùå Slot dependency not resolved" && exit 1)
          
          # Test guide
          bunx leshi-ui guide components | grep -q "Available Components" || (echo "‚ùå Guide command failed" && exit 1)
          
          echo "‚úÖ BUNX production simulation passed!"

      # Test that the CLI package structure is production ready
      - name: Validate production package structure
        run: |
          cd cli
          echo "üì¶ Validating CLI package structure..."
          
          # Check package.json structure
          node -e "
          const pkg = require('./package.json');
          
          // Check required fields
          if (!pkg.name) throw new Error('Missing package name');
          if (!pkg.version) throw new Error('Missing package version');
          if (!pkg.bin) throw new Error('Missing bin field');
          if (!pkg.bin['leshi-ui']) throw new Error('Missing leshi-ui bin');
          if (!pkg.files) throw new Error('Missing files field');
          if (!pkg.files.includes('dist')) throw new Error('dist not in files');
          if (!pkg.files.includes('packages')) throw new Error('packages not in files');
          
          console.log('‚úÖ Package.json structure valid');
          "
          
          # Check that the tarball contains everything needed
          tar -tzf leshi-ui-*.tgz > package-contents.txt
          
          # Must contain dist/
          grep -q "dist/" package-contents.txt || (echo "‚ùå No dist/ in package" && exit 1)
          grep -q "dist/index.js" package-contents.txt || (echo "‚ùå No dist/index.js in package" && exit 1)
          
          # Must contain packages/
          grep -q "packages/" package-contents.txt || (echo "‚ùå No packages/ in package" && exit 1)
          grep -q "packages/rn/" package-contents.txt || (echo "‚ùå No packages/rn/ in package" && exit 1)
          grep -q "packages/unistyles/" package-contents.txt || (echo "‚ùå No packages/unistyles/ in package" && exit 1)
          
          # Must contain package.json
          grep -q "package.json" package-contents.txt || (echo "‚ùå No package.json in package" && exit 1)
          
          echo "‚úÖ Package structure validation passed!"

      # Test CLI performance with large component sets
      - name: Test CLI performance
        run: |
          mkdir -p /tmp/performance-test
          cd /tmp/performance-test
          
          echo '{"name": "perf-test", "version": "1.0.0", "dependencies": {"react-native": "^0.70.0"}}' > package.json
          echo 'module.exports = {};' > metro.config.js
          mkdir -p android ios
          
          npm install $GITHUB_WORKSPACE/cli/leshi-ui-*.tgz
          
          echo "‚ö° Testing CLI performance..."
          
          # Time the init command
          time npx leshi-ui init --yes
          
          # Time adding multiple components at once
          time npx leshi-ui add button text modal dialog icon slot --yes
          
          # Verify all were installed
          for component in button text modal dialog icon slot; do
            test -f src/components/ui/$component.tsx || (echo "‚ùå $component not installed" && exit 1)
          done
          
          echo "‚úÖ Performance test passed!"

      # Test different project structures
      - name: Test different project structures
        run: |
          echo "üèóÔ∏è  Testing different project structures..."
          
          # Test Expo project structure
          mkdir -p /tmp/expo-project
          cd /tmp/expo-project
          echo '{"name": "expo-app", "version": "1.0.0", "dependencies": {"react-native": "^0.70.0"}, "expo": {"name": "ExpoApp"}}' > package.json
          echo '{"expo": {"name": "ExpoApp", "slug": "expo-app"}}' > app.json
          mkdir -p app
          npm install $GITHUB_WORKSPACE/cli/leshi-ui-*.tgz
          npx leshi-ui init --yes
          npx leshi-ui add button --yes
          test -f components/ui/button.tsx || (echo "‚ùå Expo project failed" && exit 1)
          echo "‚úÖ Expo project structure works"
          
          # Test React Native project structure  
          mkdir -p /tmp/rn-project
          cd /tmp/rn-project
          echo '{"name": "rn-app", "version": "1.0.0", "dependencies": {"react-native": "^0.70.0"}}' > package.json
          echo 'module.exports = {};' > metro.config.js
          mkdir -p android ios
          npm install $GITHUB_WORKSPACE/cli/leshi-ui-*.tgz
          npx leshi-ui init --yes
          npx leshi-ui add button --yes
          test -f src/components/ui/button.tsx || (echo "‚ùå RN project failed" && exit 1)
          echo "‚úÖ React Native project structure works"
          
          echo "‚úÖ All project structures work correctly!"

      # Test error handling
      - name: Test error handling
        run: |
          mkdir -p /tmp/error-test
          cd /tmp/error-test
          
          echo '{"name": "error-test", "version": "1.0.0"}' > package.json
          npm install $GITHUB_WORKSPACE/cli/leshi-ui-*.tgz
          
          echo "üö® Testing error handling..."
          
          # Test invalid component
          npx leshi-ui add non-existent-component --yes 2>&1 | grep -q "not found" || (echo "‚ùå No error for invalid component" && exit 1)
          echo "‚úÖ Invalid component error handling works"
          
          # Test missing project structure
          npx leshi-ui add button --yes 2>&1 | grep -q "Metro" || (echo "‚ùå No error for missing metro config" && exit 1)
          echo "‚úÖ Missing project structure error handling works"
          
          echo "‚úÖ Error handling tests passed!"

      # Final summary
      - name: Production readiness summary
        run: |
          echo ""
          echo "üéâ PRODUCTION READINESS VALIDATION COMPLETE!"
          echo ""
          echo "‚úÖ NPX usage simulation passed"
          echo "‚úÖ BUNX usage simulation passed" 
          echo "‚úÖ Package structure validation passed"
          echo "‚úÖ Performance tests passed"
          echo "‚úÖ Multiple project structures supported"
          echo "‚úÖ Error handling working correctly"
          echo ""
          echo "üöÄ CLI is ready for production deployment!"