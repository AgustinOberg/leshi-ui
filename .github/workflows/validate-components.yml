name: Validate Components

on:
  pull_request:
    branches: [main]
    paths:
      - 'packages/**'
      - 'cli/**'

jobs:
  validate-component-registry:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install CLI dependencies
        run: |
          cd cli
          npm install

      - name: Build CLI
        run: |
          cd cli
          npm run build

      # Test that all components in registry actually exist
      - name: Validate component registry matches actual components
        run: |
          cd cli
          node -e "
          const fs = require('fs');
          const path = require('path');
          const resolver = require('./dist/services/dependency-resolver.js');
          
          const registry = new resolver.DependencyResolver();
          const components = registry.getAvailableComponents();
          
          console.log('üìã Validating', components.length, 'components in registry...');
          
          let errors = [];
          
          for (const component of components) {
            // Check RN component exists
            const rnPath = path.join('../packages/rn/components/ui', component + '.tsx');
            if (!fs.existsSync(rnPath)) {
              errors.push(\`‚ùå RN component missing: \${rnPath}\`);
            }
            
            // Check Unistyles component exists
            const unistylesPath = path.join('../packages/unistyles/components/ui', component + '.tsx');
            if (!fs.existsSync(unistylesPath)) {
              errors.push(\`‚ùå Unistyles component missing: \${unistylesPath}\`);
            }
            
            // Validate dependencies exist
            try {
              const info = registry.getComponentInfo(component);
              for (const dep of info.registryDependencies) {
                if (!components.includes(dep)) {
                  errors.push(\`‚ùå Component '\${component}' depends on non-existent '\${dep}'\`);
                }
              }
            } catch (e) {
              errors.push(\`‚ùå Error getting info for component '\${component}': \${e.message}\`);
            }
          }
          
          if (errors.length > 0) {
            console.error('\\nüö® VALIDATION ERRORS:');
            errors.forEach(e => console.error(e));
            process.exit(1);
          }
          
          console.log('‚úÖ All', components.length, 'components validated successfully!');
          "

      # Test that all component files can be read
      - name: Validate all component files are readable
        run: |
          echo "üìÅ Validating RN components..."
          find packages/rn/components/ui -name "*.tsx" -exec echo "Checking {}" \; -exec head -n 1 {} \; > /dev/null
          
          echo "üìÅ Validating Unistyles components..."
          find packages/unistyles/components/ui -name "*.tsx" -exec echo "Checking {}" \; -exec head -n 1 {} \; > /dev/null
          
          echo "‚úÖ All component files are readable"

      # Test that theme files are consistent
      - name: Validate theme files consistency
        run: |
          echo "üé® Validating theme files..."
          
          # Check RN themes
          test -f packages/rn/styles/themes/light.ts || (echo "‚ùå RN light theme missing" && exit 1)
          test -f packages/rn/styles/themes/dark.ts || (echo "‚ùå RN dark theme missing" && exit 1)
          test -f packages/rn/styles/theme.ts || (echo "‚ùå RN theme.ts missing" && exit 1)
          test -f packages/rn/styles/context.tsx || (echo "‚ùå RN context.tsx missing" && exit 1)
          
          # Check Unistyles themes
          test -f packages/unistyles/styles/themes/light.ts || (echo "‚ùå Unistyles light theme missing" && exit 1)
          test -f packages/unistyles/styles/themes/dark.ts || (echo "‚ùå Unistyles dark theme missing" && exit 1)
          test -f packages/unistyles/styles/theme.ts || (echo "‚ùå Unistyles theme.ts missing" && exit 1)
          
          echo "‚úÖ Theme files validation passed"

      # Test component dependency resolution
      - name: Test dependency resolution for all components
        run: |
          cd cli
          node -e "
          const resolver = require('./dist/services/dependency-resolver.js');
          const registry = new resolver.DependencyResolver();
          const components = registry.getAvailableComponents();
          
          console.log('üîÑ Testing dependency resolution for all components...');
          
          let errors = [];
          
          for (const component of components) {
            try {
              const resolved = registry.resolveDependencies([component]);
              console.log(\`‚úÖ \${component}: \${resolved.join(' ‚Üí ')}\`);
            } catch (e) {
              errors.push(\`‚ùå Failed to resolve dependencies for '\${component}': \${e.message}\`);
            }
          }
          
          if (errors.length > 0) {
            console.error('\\nüö® DEPENDENCY RESOLUTION ERRORS:');
            errors.forEach(e => console.error(e));
            process.exit(1);
          }
          
          console.log('\\n‚úÖ All dependency resolutions working correctly!');
          "

  validate-cli-integration:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install CLI dependencies and build
        run: |
          cd cli
          npm install
          npm run build
          npm pack

      # Test that CLI can install each component individually
      - name: Test individual component installation
        run: |
          mkdir -p test-individual-components
          cd test-individual-components
          echo '{"name": "test", "version": "1.0.0", "dependencies": {"react-native": "^0.70.0"}}' > package.json
          echo 'module.exports = {};' > metro.config.js
          mkdir -p android ios
          
          # Install CLI
          npm install ../cli/leshi-ui-*.tgz
          
          # Initialize project
          npx leshi-ui init --yes
          
          # Get list of components and test each one
          cd ../cli
          node -e "
          const resolver = require('./dist/services/dependency-resolver.js');
          const registry = new resolver.DependencyResolver();
          const components = registry.getAvailableComponents();
          
          console.log('Testing installation of', components.length, 'components individually...');
          
          // Write components to file for shell script
          require('fs').writeFileSync('components-list.txt', components.join('\\n'));
          "
          
          # Test each component installation
          cd ../test-individual-components
          while IFS= read -r component; do
            echo "üß™ Testing component: $component"
            npx leshi-ui add "$component" --yes || (echo "‚ùå Failed to install $component" && exit 1)
            echo "‚úÖ Successfully installed: $component"
          done < ../cli/components-list.txt
          
          echo "‚úÖ All components can be installed individually!"

      # Test that changes don't break existing functionality
      - name: Test CLI regression
        run: |
          mkdir -p test-regression
          cd test-regression
          echo '{"name": "test-regression", "version": "1.0.0", "dependencies": {"react-native": "^0.70.0"}}' > package.json
          echo 'module.exports = {};' > metro.config.js
          mkdir -p android ios
          
          # Install CLI
          npm install ../cli/leshi-ui-*.tgz
          
          # Test common workflows
          npx leshi-ui init --yes
          npx leshi-ui add button text --yes
          npx leshi-ui add modal --yes
          npx leshi-ui add dialog --yes
          npx leshi-ui guide components | head -10
          
          # Verify expected files exist
          test -f src/components/ui/button.tsx || (echo "‚ùå Button not created" && exit 1)
          test -f src/components/ui/text.tsx || (echo "‚ùå Text not created" && exit 1)
          test -f src/components/ui/modal.tsx || (echo "‚ùå Modal not created" && exit 1)
          test -f src/components/ui/dialog.tsx || (echo "‚ùå Dialog not created" && exit 1)
          test -f lib/modal-utils.ts || (echo "‚ùå Modal utils not created" && exit 1)
          
          echo "‚úÖ Regression test passed - all workflows working!"

  validate-typescript:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Check CLI TypeScript
      - name: Validate CLI TypeScript
        run: |
          cd cli
          npm install
          echo "üîç Checking CLI TypeScript..."
          npx tsc --noEmit || (echo "‚ùå CLI TypeScript errors" && exit 1)
          echo "‚úÖ CLI TypeScript validation passed"

      # Check component TypeScript (RN)
      - name: Validate RN components TypeScript
        run: |
          cd packages/rn
          if [ -f package.json ]; then
            npm install
            echo "üîç Checking RN components TypeScript..."
            npx tsc --noEmit || (echo "‚ùå RN components TypeScript errors" && exit 1)
            echo "‚úÖ RN components TypeScript validation passed"
          else
            echo "‚ÑπÔ∏è  No package.json in RN package, skipping TypeScript check"
          fi

      # Check component TypeScript (Unistyles)
      - name: Validate Unistyles components TypeScript
        run: |
          cd packages/unistyles
          if [ -f package.json ]; then
            npm install
            echo "üîç Checking Unistyles components TypeScript..."
            npx tsc --noEmit || (echo "‚ùå Unistyles components TypeScript errors" && exit 1)
            echo "‚úÖ Unistyles components TypeScript validation passed"
          else
            echo "‚ÑπÔ∏è  No package.json in Unistyles package, skipping TypeScript check"
          fi